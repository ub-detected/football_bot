name: Build and Deploy

on:
  push:
    branches: [ LeshaCiCd ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Display project structure
      run: |
        ls -la
        echo "-------------------------------"
        find . -type f -name "wait-for-db.sh" -o -name "*.dockerfile" -o -name "Dockerfile*"
        echo "-------------------------------"
        find . -type d -name "TG_miniApp_*"

    - name: Generate Docker Compose file
      run: |
        cat > docker-compose.yml << 'EOF'
        version: '3'

        services:
          db:
            image: postgres:16
            volumes:
              - postgres_data:/var/lib/postgresql/data
            environment:
              - POSTGRES_PASSWORD=footbot777Azat
              - POSTGRES_USER=postgres
              - POSTGRES_DB=mydb
            # Не публикуем порт наружу, а используем только внутреннюю сеть
            # ports:
            #  - "5432:5432"
            expose:
              - "5432"
            networks:
              - app-network
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U postgres"]
              interval: 5s
              timeout: 5s
              retries: 5

          nginx:
            image: nginx:alpine
            ports:
              - "80:80"
              - "443:443"
            volumes:
              - ./nginx/conf:/etc/nginx/conf.d
              - ./nginx/ssl:/etc/nginx/ssl
              - ./nginx/logs:/var/log/nginx
            depends_on:
              - backend
              - frontend
            networks:
              - app-network
            restart: always

          backend:
            build: 
              context: .
              dockerfile: Dockerfile.backend
            ports:
              - "5001:5001"
            environment:
              - FLASK_ENV=production
              - FLASK_DEBUG=0
              - DATABASE_URL=postgresql://postgres:footbot777Azat@db/mydb
            depends_on:
              db:
                condition: service_healthy
            networks:
              - app-network
            restart: unless-stopped

          frontend:
            build:
              context: .
              dockerfile: Dockerfile.frontend
            ports:
              - "5173:5173"
            depends_on:
              - backend
            environment:
              - VITE_API_URL=https://www.findyoursport.ru/api
            networks:
              - app-network
            restart: unless-stopped

        networks:
          app-network:
            driver: bridge

        volumes:
          postgres_data:
        EOF

    - name: Generate Nginx Config
      run: |
        mkdir -p nginx/conf
        cat > nginx/conf/default.conf << 'EOF'
        server {
            listen 80;
            server_name www.findyoursport.ru findyoursport.ru;
            
            location / {
                return 301 https://$host$request_uri;
            }
        }

        server {
            listen 443 ssl;
            server_name www.findyoursport.ru findyoursport.ru;
            
            ssl_certificate /etc/nginx/ssl/fullchain.pem;
            ssl_certificate_key /etc/nginx/ssl/privkey.pem;
            
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_prefer_server_ciphers on;
            ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
            ssl_session_cache shared:SSL:10m;
            ssl_session_timeout 1h;
            
            location / {
                proxy_pass http://frontend:5173;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
            }
            
            location /api/ {
                proxy_pass http://backend:5001/api/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
        EOF

    - name: Create archive of project
      run: |
        cat > wait-for-db.sh << 'EOF'
        #!/bin/bash
        set -e
        
        host="$1"
        port="$2"
        
        echo "Waiting for PostgreSQL at $host:$port..."
        
        until nc -z -v -w30 "$host" "$port"; do
          echo "PostgreSQL is not available yet - sleeping"
          sleep 2
        done
        
        echo "PostgreSQL is up - continuing"
        EOF
        
        chmod +x wait-for-db.sh
        
        tar -czvf project.tar.gz Dockerfile.backend Dockerfile.frontend TG_miniApp_back TG_miniApp_front wait-for-db.sh

    - name: Copy files to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        source: "docker-compose.yml,nginx/conf/default.conf,project.tar.gz"
        target: "/home/footbot"
        strip_components: 0

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          echo "Проверка наличия Docker..."
          if ! command -v docker &> /dev/null; then
            echo "Docker не установлен. Устанавливаем..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce
          fi
          
          echo "Проверка наличия Docker Compose..."
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose не установлен. Устанавливаем..."
            sudo apt-get update
            sudo apt-get install -y docker-compose
          fi
          
          mkdir -p /home/footbot/nginx/conf /home/footbot/nginx/ssl /home/footbot/nginx/logs
          cd /home/footbot
          
          if [ ! -f docker-compose.yml ]; then
            echo "ОШИБКА: docker-compose.yml не найден!"
            exit 1
          fi
          
          echo "Распаковка исходного кода..."
          tar -xzvf project.tar.gz
          
          echo "Содержимое директории:"
          ls -la
          
          echo "Проверка наличия всех необходимых файлов..."
          if [ ! -f Dockerfile.backend ]; then echo "ОШИБКА: Dockerfile.backend не найден!"; exit 1; fi
          if [ ! -f Dockerfile.frontend ]; then echo "ОШИБКА: Dockerfile.frontend не найден!"; exit 1; fi
          if [ ! -f wait-for-db.sh ]; then echo "ОШИБКА: wait-for-db.sh не найден!"; exit 1; fi
          if [ ! -d TG_miniApp_back ]; then echo "ОШИБКА: TG_miniApp_back не найден!"; exit 1; fi
          if [ ! -d TG_miniApp_front ]; then echo "ОШИБКА: TG_miniApp_front не найден!"; exit 1; fi
          
          echo "Проверка занятости портов..."
          echo "Порт 5432 (PostgreSQL):"
          sudo netstat -tulpn | grep 5432 || echo "Порт 5432 свободен"
          echo "Порт 80 (HTTP):"
          sudo netstat -tulpn | grep 80 || echo "Порт 80 свободен"
          echo "Порт 443 (HTTPS):"
          sudo netstat -tulpn | grep 443 || echo "Порт 443 свободен"
          
          echo "Останавливаем все запущенные контейнеры..."
          docker stop $(docker ps -aq) || true
          docker rm $(docker ps -aq) || true
          
          echo "Остановка конфликтующих сервисов, если они запущены..."
          # Если на сервере уже есть PostgreSQL, останавливаем его
          sudo systemctl stop postgresql.service || true
          
          echo "Проверка прав доступа на скрипте wait-for-db.sh..."
          chmod +x wait-for-db.sh
          
          if [ ! -f nginx/ssl/fullchain.pem ]; then
            echo "Копирование SSL сертификатов..."
            sudo find /etc/letsencrypt/live/ -type d -name "findyoursport.ru*" || echo "Сертификаты не найдены"
            sudo find /etc/letsencrypt/live/ -type f -name "*.pem" || echo "Сертификаты не найдены"
            
            if [ -f /etc/letsencrypt/live/findyoursport.ru/fullchain.pem ]; then
              sudo cp /etc/letsencrypt/live/findyoursport.ru/fullchain.pem nginx/ssl/
              sudo cp /etc/letsencrypt/live/findyoursport.ru/privkey.pem nginx/ssl/
            elif [ -f /etc/letsencrypt/live/www.findyoursport.ru/fullchain.pem ]; then
              sudo cp /etc/letsencrypt/live/www.findyoursport.ru/fullchain.pem nginx/ssl/
              sudo cp /etc/letsencrypt/live/www.findyoursport.ru/privkey.pem nginx/ssl/
            else
              echo "ВНИМАНИЕ: Сертификаты не найдены! Проверьте пути к сертификатам."
            fi
            
            sudo chmod -R 755 nginx/ssl
          fi
          
          echo "Вывод версий Docker и Docker Compose:"
          docker --version
          docker-compose --version
          
          echo "Останавливаем контейнеры если они запущены..."
          docker-compose down || true
          
          echo "Удаляем старые образы..."
          docker system prune -af || true
          
          echo "Проверка содержимого файла docker-compose.yml:"
          cat docker-compose.yml
          
          echo "Сборка и запуск контейнеров..."
          docker-compose build --no-cache
          docker-compose up -d
          
          echo "Статус контейнеров:"
          docker-compose ps
          
          # Ожидаем небольшую паузу для запуска контейнеров
          sleep 10
          
          echo "Логи контейнера базы данных:"
          docker-compose logs db
          
          echo "Логи контейнера бэкенда:"
          docker-compose logs backend
          
          echo "Логи контейнера nginx:"
          docker-compose logs nginx
          
          echo "Проверка сетевых подключений между контейнерами:"
          docker network inspect app-network
          
          echo "Перезапуск Nginx..."
          sudo systemctl restart nginx || true
          echo "Статус Nginx:"
          sudo systemctl status nginx || true
